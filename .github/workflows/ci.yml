name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  build-and-verify:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      ALLOWED_ORIGIN: ${{ secrets.ALLOWED_ORIGIN }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      ADMIN_PASSWORD_HASH: ${{ secrets.ADMIN_PASSWORD_HASH }}
      DB_SSL: ${{ secrets.DB_SSL }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies (include devDependencies)
        run: HUSKY=0 npm ci --include=dev

      - name: Install server dependencies (include devDependencies)
        run: HUSKY=0 npm ci --include=dev
        working-directory: server

      - name: Verify environment (strict if secrets present on main, fallback with CI defaults otherwise)
        # We cannot reference `secrets.*` inside `if:` expressions reliably in all workflow parsing contexts,
        # so perform the decision at runtime inside the step. Map secrets into the step env so the shell can
        # inspect them and decide whether to run the strict verification or populate CI defaults.
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          ALLOWED_ORIGIN: ${{ secrets.ALLOWED_ORIGIN }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD_HASH: ${{ secrets.ADMIN_PASSWORD_HASH }}
          DB_SSL: ${{ secrets.DB_SSL }}
        run: |
          echo "Checking environment for verify:env..."
          is_main=false
          if [ "${GITHUB_EVENT_NAME}" = "push" ] && [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            is_main=true
          fi

          have_secrets=true
          for v in DATABASE_URL SESSION_SECRET ALLOWED_ORIGIN ADMIN_EMAIL ADMIN_PASSWORD_HASH DB_SSL; do
            if [ -z "${!v}" ]; then
              have_secrets=false
              break
            fi
          done

          if [ "$is_main" = "true" ] && [ "$have_secrets" = "true" ]; then
            echo "Running strict env verification (main push with secrets present)..."
            npm run verify:env
          else
            echo "Secrets missing or not main push â€” setting CI-friendly defaults and running verify..."
            export DATABASE_URL="${DATABASE_URL:-postgres://ci:ci@127.0.0.1:5432/ci_db}"
            export SESSION_SECRET="${SESSION_SECRET:-ci-session-secret-please-change-0000000000000000}"
            export ALLOWED_ORIGIN="${ALLOWED_ORIGIN:-http://localhost}"
            export ADMIN_EMAIL="${ADMIN_EMAIL:-admin@localhost.test}"
            export ADMIN_PASSWORD_HASH="${ADMIN_PASSWORD_HASH:-$2b$12$cihashedplaceholderxxxxxxxxxxxxxxxxxxxxxxxx}"
            export DB_SSL="${DB_SSL:-false}"
            npm run verify:env || true
          fi

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npm run test:all

      - name: Run frontend tests with coverage
        run: npm run coverage:run

      - name: Run server tests with coverage
        # Use the root-level npm script which runs the server tests with --prefix server.
        # Running npm in the server working-directory previously failed because that package.json
        # doesn't contain the `coverage:run:server` script. Keep working-directory at root.
        run: npm run coverage:run:server

      - name: Merge coverage reports
        run: npm run coverage:merge

      - name: Upload merged coverage (lcov + html)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-merged
          path: coverage/merged
