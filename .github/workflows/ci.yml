name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  build-and-verify:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      ALLOWED_ORIGIN: ${{ secrets.ALLOWED_ORIGIN }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      ADMIN_PASSWORD_HASH: ${{ secrets.ADMIN_PASSWORD_HASH }}
      DB_SSL: ${{ secrets.DB_SSL }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies (include devDependencies)
        run: HUSKY=0 npm ci --include=dev

      - name: Install server dependencies (include devDependencies)
        run: HUSKY=0 npm ci --include=dev
        working-directory: server

      - name: Verify production environment configuration
        # Only run the full production env verification when we're on main *and* the required secrets are available.
        # This prevents CI from failing when runs are executed in forks or repos without production secrets.
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.DATABASE_URL && secrets.SESSION_SECRET && secrets.ALLOWED_ORIGIN && secrets.ADMIN_EMAIL && secrets.ADMIN_PASSWORD_HASH && secrets.DB_SSL }}
        run: npm run verify:env

      - name: Prepare CI env and run fallback verify (when secrets missing)
        # Run a permissive verification path when required production secrets are not available
        # (e.g., pull requests, forks, or repos without secrets). This populates sensible defaults so
        # `npm run verify:env` can still execute and tests run reliably in CI.
        if: ${{ ! (github.event_name == 'push' && github.ref == 'refs/heads/main' && secrets.DATABASE_URL && secrets.SESSION_SECRET && secrets.ALLOWED_ORIGIN && secrets.ADMIN_EMAIL && secrets.ADMIN_PASSWORD_HASH && secrets.DB_SSL) }}
        run: |
          echo "Preparing CI environment variables with defaults (secrets will override when present)..."
          export DATABASE_URL="${DATABASE_URL:-postgres://ci:ci@127.0.0.1:5432/ci_db}"
          export SESSION_SECRET="${SESSION_SECRET:-ci-session-secret-please-change-0000000000000000}"
          export ALLOWED_ORIGIN="${ALLOWED_ORIGIN:-http://localhost}"
          export ADMIN_EMAIL="${ADMIN_EMAIL:-admin@localhost.test}"
          export ADMIN_PASSWORD_HASH="${ADMIN_PASSWORD_HASH:-$2b$12$cihashedplaceholderxxxxxxxxxxxxxxxxxxxxxxxx}"
          export DB_SSL="${DB_SSL:-false}"
          # Echo masked-ish info for debugging (do not print secrets in real CI)
          echo "DATABASE_URL set to: ${DATABASE_URL}"
          echo "ALLOWED_ORIGIN set to: ${ALLOWED_ORIGIN}"
          echo "ADMIN_EMAIL set to: ${ADMIN_EMAIL}"
          npm run verify:env
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          ALLOWED_ORIGIN: ${{ secrets.ALLOWED_ORIGIN }}
          ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD_HASH: ${{ secrets.ADMIN_PASSWORD_HASH }}
          DB_SSL: ${{ secrets.DB_SSL }}

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npm run test:all

      - name: Run frontend tests with coverage
        run: npm run coverage:run

      - name: Run server tests with coverage
        run: npm run coverage:run:server
        working-directory: server

      - name: Merge coverage reports
        run: npm run coverage:merge

      - name: Upload merged coverage (lcov + html)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-merged
          path: coverage/merged
